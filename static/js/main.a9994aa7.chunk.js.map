{"version":3,"sources":["Components/Cell.js","Components/Board.js","Components/App.js","index.js"],"names":["Cell","_ref","isLit","flipCellsAround","classes","concat","react_default","a","createElement","className","onClick","MakeTable","board","hasWon","nrows","length","tableBoard","y","row","ncols","_loop","x","coord","push","Components_Cell","key","Board","_ref2","_ref2$ncols","_ref2$nrows","_ref2$chanceLightStar","chanceLightStartsOn","_useState","useState","Math","random","createBoard","_useState2","Object","slicedToArray","setBoard","_useState3","_useState4","setHasWon","newBoard","JSON","parse","stringify","_coord$split$map","split","map","Number","_coord$split$map2","flipCell","wonGame","every","cell","App","Components_Board","rootElement","document","getElementById","ReactDOM","render","Components_App"],"mappings":"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","file":"static/js/main.a9994aa7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.scss\";\n\nfunction Cell({ isLit, flipCellsAround }) {\n  let classes = `Cell${isLit ? \" lit\" : \"\"}`;\n\n  const handleClick = () => {\n    flipCellsAround();\n  };\n\n  return <td className={classes} onClick={handleClick} />;\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.scss\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction createBoard(ncols, nrows, chanceLightStartsOn) {\n  let board = [];\n  // TODO: create array-of-arrays of true/false values\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      row.push(Math.random() < chanceLightStartsOn);\n    }\n    board.push(row);\n  }\n  return board;\n}\n\n  function MakeTable({board, hasWon, flipCellsAround}) {\n      // if the game is won, just show a winning msg & render nothing else\n    if(hasWon) {\n      return (\n        <div className='Board-title'>\n          <div className=\"winner\">\n          <span className='neon-orange'>You</span>\n          <span className='neon-blue'>Win!</span>\n          </div>\n        </div>\n      )\n    }\n    const nrows = board.length;\n    let tableBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      const ncols = board[y].length;\n      for (let x = 0; x < ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={board[y][x]}\n            flipCellsAround={() => flipCellsAround(coord)}\n          />\n        );\n      }\n      tableBoard.push(<tr key={y}>{row}</tr>);\n    }\n\n    return (\n      <div>\n        <div className='Board-title'>\n          <div className='neon-orange'>Lights</div>\n          <div className='neon-blue'>Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>{tableBoard}</tbody>\n        </table>\n      </div>\n    );\n  }\n\nfunction Board({ ncols = 5, nrows = 5, chanceLightStartsOn = 0.25 }) {\n  const [board, setBoard] = useState(\n    createBoard(ncols, nrows, chanceLightStartsOn)\n  );\n  const [hasWon, setHasWon] = useState(false);\n\n  const flipCellsAround = coord => {\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        newBoard[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);     // flip cell selected.\n    flipCell(y, x - 1); // flip cell to left.\n    flipCell(y, x + 1); // flip cell to right.\n    flipCell(y - 1, x); // flip cell above.\n    flipCell(y + 1, x); // flip cell below.\n\n    setBoard(newBoard);\n    \n    // win when every cell is turned off\n    const wonGame = newBoard.every(row => row.every(cell => cell));\n    setHasWon(wonGame);\n  };\n\n  return <MakeTable board={board} flipCellsAround={flipCellsAround} hasWon={hasWon} />;\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board ncols={5} nrows={5} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\nimport \"./index.scss\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}